package controllers

/*
Copyright 2022 The k8gb Contributors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Generated by GoLic, for more details see: https://github.com/AbsaOSS/golic
*/

import (
	"context"
	"fmt"
	"strconv"

	"github.com/k8gb-io/k8gb/controllers/depresolver"

	k8gbv1beta1 "github.com/k8gb-io/k8gb/api/v1beta1"
	corev1 "k8s.io/api/core/v1"
	netv1 "k8s.io/api/networking/v1"
	"k8s.io/apimachinery/pkg/types"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/controller/controllerutil"
	"sigs.k8s.io/controller-runtime/pkg/handler"
	"sigs.k8s.io/controller-runtime/pkg/reconcile"
	"sigs.k8s.io/controller-runtime/pkg/source"
	externaldns "sigs.k8s.io/external-dns/endpoint"
)

// SetupWithManager configures controller manager
func (r *GslbReconciler) SetupWithManager(mgr ctrl.Manager) error {
	// Figure out Gslb resource name to Reconcile when non controlled Name is updated

	endpointMapHandler := handler.EnqueueRequestsFromMapFunc(
		func(a client.Object) []reconcile.Request {
			gslbList := &k8gbv1beta1.GslbList{}
			opts := []client.ListOption{
				client.InNamespace(a.GetNamespace()),
			}
			c := mgr.GetClient()
			err := c.List(context.TODO(), gslbList, opts...)
			if err != nil {
				log.Info().Msg("Can't fetch gslb objects")
				return nil
			}
			gslbName := ""
			for _, gslb := range gslbList.Items {
				for _, rule := range gslb.Spec.Ingress.Rules {
					for _, path := range rule.HTTP.Paths {
						if path.Backend.Service != nil && path.Backend.Service.Name == a.GetName() {
							gslbName = gslb.Name
						}
					}
				}
			}
			if len(gslbName) > 0 {
				return []reconcile.Request{
					{NamespacedName: types.NamespacedName{
						Name:      gslbName,
						Namespace: a.GetNamespace(),
					}},
				}
			}
			return nil
		})

	gslbMapHandler := handler.EnqueueRequestsFromMapFunc(
		func(a client.Object) []reconcile.Request {
			var upstreamGslb = a.(*k8gbv1beta1.Gslb)
			c := mgr.GetClient()
			cc := newMapper(c)
			ing, _, _ := cc.getIngress(upstreamGslb.Namespace, upstreamGslb.Name)
			if !cc.equal(ing, upstreamGslb) {
				r.syncIngress(c, upstreamGslb)
			}
			return nil
		})

	ingressMapHandler := handler.EnqueueRequestsFromMapFunc(
		func(a client.Object) []reconcile.Request {
			annotations := a.GetAnnotations()
			if _, found := annotations[strategyAnnotation]; found {
				var upstreamIngress = a.(*netv1.Ingress)
				c := mgr.GetClient()
				cc := newMapper(c)
				gslb, _, _ := cc.getGslb(upstreamIngress.Namespace, upstreamIngress.Name)
				if !cc.equal(upstreamIngress, gslb) {
					r.syncGslb(c, upstreamIngress)
				}
			}
			return nil
		})

	return ctrl.NewControllerManagedBy(mgr).
		For(&k8gbv1beta1.Gslb{}).
		Owns(&netv1.Ingress{}).
		Owns(&externaldns.DNSEndpoint{}).
		Watches(&source.Kind{Type: &corev1.Endpoints{}}, endpointMapHandler).
		Watches(&source.Kind{Type: &netv1.Ingress{}}, ingressMapHandler).
		Watches(&source.Kind{Type: &k8gbv1beta1.Gslb{}}, gslbMapHandler).
		Complete(r)
}

func (r *GslbReconciler) syncIngress(c client.Client, upstreamGslb *k8gbv1beta1.Gslb) {
	cc := newMapper(c)
	_, result, err := cc.getGslb(upstreamGslb.Namespace, upstreamGslb.Name)
	switch result {
	case mapperResultUpdate:
		var ingress *netv1.Ingress
		ingress, _, err = cc.getIngress(upstreamGslb.Namespace, upstreamGslb.Name)
		if err != nil {
			log.Err(err).
				Str("ingress", upstreamGslb.Name).
				Msg("can't load Ingress")
		}
		if !cc.equal(ingress, upstreamGslb) {
			log.Debug().
				Str("ingress", ingress.Name).
				Msg("Updating Ingress from Gslb")
			ingress, _, err = cc.mapGslbAsIngress(upstreamGslb)
			if err != nil {
				log.Err(err).
					Str("gslb", ingress.Name).
					Msg("can't update Ingress from Gslb")
				return
			}
			err = c.Update(context.TODO(), ingress)
			if err != nil {
				log.Err(err).
					Str("gslb", ingress.Name).
					Msg("can't update Ingress from Gslb")
				return
			}
		}
		return
	case mapperResultCreate:
		var ingress *netv1.Ingress
		log.Debug().Str("gslb", upstreamGslb.Name).Msg("updating GSLB")
		ingress, _, err = cc.mapGslbAsIngress(upstreamGslb)
		if err != nil {
			log.Err(err).
				Str("gslb", upstreamGslb.Name).
				Msg("can't parse Gslb from Ingress")
			return
		}
		log.Info().
			Str("ingress", ingress.Name).
			Msg(fmt.Sprintf("Creating a new Ingress out of Gslb with '%s' annotation", strategyAnnotation))
		err = c.Create(context.Background(), ingress)
		if err != nil {
			log.Err(err).Msg("Ingress creation failed")
		}
	default:
		log.Err(err).
			Str("gslb", upstreamGslb.Name).
			Msg("Can't load gslb object")
	}
}

func (r *GslbReconciler) syncGslb(c client.Client, upstreamIngress *netv1.Ingress) {
	log.Info().
		Str("annotation", fmt.Sprintf("(%s:%s)", strategyAnnotation, upstreamIngress.Annotations[strategyAnnotation])).
		Str("ingress", upstreamIngress.Name).
		Msg("Detected strategy annotation on ingress")

	if

	cc := newMapper(c)
	var gslb *k8gbv1beta1.Gslb
	gslb, result, err := cc.getGslb(upstreamIngress.Namespace, upstreamIngress.Name)
	if err != nil {
		log.Err(err).
			Str("ingress", upstreamIngress.Name).
			Msg("can't load Gslb")
	}
	switch result {
	case mapperResultUpdate:
		if !cc.equal(upstreamIngress, gslb) {
			log.Debug().
				Str("gslb", gslb.Name).
				Msg("Updating Gslb from ingress")
			gslb, _, err = cc.mapIngressAsGslb(upstreamIngress)
			if err != nil {
				log.Err(err).
					Str("gslb", gslb.Name).
					Msg("can't update Gslb from Ingress")
				return
			}
			err = c.Update(context.TODO(), gslb)
			if err != nil {
				log.Err(err).
					Str("gslb", gslb.Name).
					Msg("can't update Gslb from Ingress")
				return
			}
		}
		return
	case mapperResultCreate:
		gslb, _, err = cc.mapIngressAsGslb(upstreamIngress)
		if err != nil {
			log.Err(err).
				Str("ingress", upstreamIngress.Name).
				Msg("can't parse Gslb from Ingress")
			return
		}
		err = r.DepResolver.ResolveGslbSpec(context.TODO(), gslb, c)
		if err != nil {
			log.Err(err).
				Str("ingress", upstreamIngress.Name).
				Msg("can't parse Gslb from Ingress")
			return
		}
		err = controllerutil.SetControllerReference(upstreamIngress, gslb, r.Scheme)
		if err != nil {
			log.Err(err).
				Str("ingress", upstreamIngress.Name).
				Str("gslb", gslb.Name).
				Msg("Cannot set the Ingress as the owner of the Gslb")
		}
		log.Info().
			Str("gslb", gslb.Name).
			Msg(fmt.Sprintf("Creating a new Gslb out of Ingress with '%s' annotation", strategyAnnotation))
		err = c.Create(context.Background(), gslb)
		if err != nil {
			log.Err(err).Msg("Glsb creation failed")
		}

	default:
		log.Err(err).
			Str("gslb", upstreamIngress.Name).
			Msg("Can't load gslb object")
	}
}

func parseStrategy(annotations map[string]string, strategy string) (result k8gbv1beta1.Strategy, err error) {
	toInt := func(k string, v string) (int, error) {
		intValue, err := strconv.Atoi(v)
		if err != nil {
			return -1, fmt.Errorf("can't parse annotation value %s to int for key %s", v, k)
		}
		return intValue, nil
	}

	result = k8gbv1beta1.Strategy{
		Type: strategy,
	}

	for annotationKey, annotationValue := range annotations {
		switch annotationKey {
		case dnsTTLSecondsAnnotation:
			if result.DNSTtlSeconds, err = toInt(annotationKey, annotationValue); err != nil {
				return result, err
			}
		case splitBrainThresholdSecondsAnnotation:
			if result.SplitBrainThresholdSeconds, err = toInt(annotationKey, annotationValue); err != nil {
				return result, err
			}
		case primaryGeoTagAnnotation:
			result.PrimaryGeoTag = annotationValue
		}
	}

	if strategy == depresolver.FailoverStrategy {
		if len(result.PrimaryGeoTag) == 0 {
			return result, fmt.Errorf("%s strategy requires annotation %s", depresolver.FailoverStrategy, primaryGeoTagAnnotation)
		}
	}
	return result, nil
}
