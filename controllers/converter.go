package controllers

/*
Copyright 2022 The k8gb Contributors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Generated by GoLic, for more details see: https://github.com/AbsaOSS/golic
*/

import (
	"context"
	"fmt"

	k8gbv1beta1 "github.com/k8gb-io/k8gb/api/v1beta1"
	netv1 "k8s.io/api/networking/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

// Converts between ingress and gslb.
type converter struct {
	client.Client
}

type converterResult int

const (
	converterResultExists converterResult = iota
	converterResultNotExists
	converterResultError
)

func newConverter(c client.Client) *converter {
	return &converter{Client: c}
}

func (c *converter) getGslb(namespace, name string) (gslb *k8gbv1beta1.Gslb, r converterResult, err error) {
	gslb = &k8gbv1beta1.Gslb{}
	err = c.Get(context.TODO(), client.ObjectKey{
		Namespace: namespace,
		Name:      name,
	}, gslb)
	r, err = c.getConverterResult(err)
	return gslb, r, err
}

func (c *converter) getIngress(namespace, name string) (ingress *netv1.Ingress, r converterResult, err error) {
	ingress = &netv1.Ingress{}
	err = c.Get(context.TODO(), client.ObjectKey{
		Namespace: namespace,
		Name:      name,
	}, ingress)
	r, err = c.getConverterResult(err)
	return ingress, r, err
}

//  func (c *converter) gslbAsIngress(gslb *k8gbv1beta1.Gslb) (ingress *netv1.Ingress, r converterResult, err error) {
//	ingress, r, err = c.getIngress(gslb.Namespace, gslb.Name)
//	if err != nil {
//		return ingress, r, err
//	}
//	ingress.Spec = k8gbv1beta1.ToV1IngressSpec(gslb.Spec.Ingress)
//	ingress.Annotations[dnsTTLSecondsAnnotation] = strconv.Itoa(gslb.Spec.Strategy.DNSTtlSeconds)
//	ingress.Annotations[splitBrainThresholdSecondsAnnotation] = strconv.Itoa(gslb.Spec.Strategy.SplitBrainThresholdSeconds)
//	ingress.Annotations[primaryGeoTagAnnotation] = gslb.Spec.Strategy.PrimaryGeoTag
//	ingress.Annotations[strategyAnnotation] = gslb.Spec.Strategy.Type
//	return ingress, r, err
//  }

func (c *converter) ingressAsGslb(ingress *netv1.Ingress) (gslb *k8gbv1beta1.Gslb, r converterResult, err error) {
	gslb, r, err = c.getGslb(ingress.Namespace, ingress.Name)
	if err != nil {
		return gslb, r, err
	}
	strategy, found := ingress.GetAnnotations()[strategyAnnotation]
	if !found {
		return gslb, r, fmt.Errorf("missing %s field in %s ingress annotation", strategyAnnotation, ingress.Name)
	}
	gslb.Spec.Ingress = k8gbv1beta1.FromV1IngressSpec(ingress.Spec)
	gslb.Spec.Strategy, err = parseStrategy(ingress.Annotations, strategy)

	return gslb, r, err
}

func (c *converter) getConverterResult(err error) (converterResult, error) {
	if err != nil && errors.IsNotFound(err) {
		return converterResultNotExists, nil
	} else if err != nil {
		return converterResultError, err
	}
	return converterResultExists, nil
}
